#!/usr/bin/env bash
set -uo pipefail # No -e to support write to canary file after cancel
USE_GITIGNORE=1

# ---------- functions ----------

# Join array without inserting a string when the array is empty
array_join() {
  if [[ $# -gt 0 ]]; then
    for arg in "$@"; do
      printf "'%s' " "${arg}"
    done
  fi

}

# ---------- execute immediately ----------
# Code below gets executed as soon as this script is sourced. Think wisely!

# ---------- Set up whether to use gitignore
USE_GITIGNORE_OPT=()
# Disable requiring export; we're sourcing this file.
# shellcheck disable=SC2034
if [[ $USE_GITIGNORE -eq 0 ]]; then USE_GITIGNORE_OPT=('--no-ignore'); fi

# ---------- Set up an array for type filtering in rg
IFS=: read -r -a TYPE_FILTER <<<"${TYPE_FILTER-}"
TYPE_FILTER_ARR=()
for ENTRY in ${TYPE_FILTER[@]+"${TYPE_FILTER[@]}"}; do
  TYPE_FILTER_ARR+=("--type")
  TYPE_FILTER_ARR+=("$ENTRY")
done

# # ---------- Set up glob patterns
# IFS=: read -r -a GLOB_PATTERNS <<<"$GLOBS"
# GLOBS=()
# # Quick note on ${X[@]+"${X[@]}"}: It's complicated.
# # https://stackoverflow.com/q/7577052/888916
# for ENTRY in ${GLOB_PATTERNS[@]+"${GLOB_PATTERNS[@]}"}; do
#     GLOBS+=("--glob")
#     GLOBS+=("$ENTRY")
# done

# Parse fzf version
FZF_VER=$(fzf --version)
# shellcheck disable=SC2034
FZF_VER_PT1=${FZF_VER:0:3}
# shellcheck disable=SC2034
FZF_VER_PT2=${FZF_VER:3:1}

# If we only have one directory to search, invoke commands relative to that directory
PATHS=("$@")
SINGLE_DIR_ROOT=''
if [ ${#PATHS[@]} -eq 1 ]; then
  SINGLE_DIR_ROOT=${PATHS[0]}
  PATHS=()
  cd "$SINGLE_DIR_ROOT" || exit
fi

# 1. Search for text in files using Ripgrep
# 2. Interactively restart Ripgrep with reload action
# 3. Open the file
# shellcheck disable=SC2207
RG_PREFIX=(rg
  --column
  --hidden
  $(array_join ${USE_GITIGNORE_OPT+"${USE_GITIGNORE_OPT[@]}"})
  --line-number
  --no-heading
  --color=always
  --smart-case
  --colors 'match:fg:green'
  --colors 'path:fg:white'
  --colors 'path:style:nobold'
  --glob "'!**/.git/'"
  #$(array_join "${GLOBS[@]+"${GLOBS[@]}"}")
)
if [[ ${#TYPE_FILTER_ARR[@]} -gt 0 ]]; then
  RG_PREFIX+=("$(printf "%s " "${TYPE_FILTER_ARR[@]}")")
fi
RG_PREFIX+=(" 2> /dev/null")
FIND_WITHIN_FILES_PREVIEW_ENABLED=1
FIND_WITHIN_FILES_PREVIEW_COMMAND=""
FIND_WITHIN_FILES_PREVIEW_WINDOW_CONFIG=""

PREVIEW_ENABLED=${FIND_WITHIN_FILES_PREVIEW_ENABLED:-1}
PREVIEW_COMMAND=${FIND_WITHIN_FILES_PREVIEW_COMMAND:-'bat --decorations=always --color=always --theme=Dracula {1} --highlight-line {2} --style=header,grid'}
PREVIEW_WINDOW=${FIND_WITHIN_FILES_PREVIEW_WINDOW_CONFIG:-'right:border-left:50%:+{2}+3/3:~3'}
HAS_SELECTION=${HAS_SELECTION-}
# We match against the beginning of the line so everything matches but nothing gets highlighted...
QUERY='^'
INITIAL_QUERY='' # Don't show initial "^" regex in fzf
if [[ $HAS_SELECTION -eq 1 ]]; then
  # ... or against the selection if we have one
  QUERY="$(cat "$SELECTION_FILE")"
  INITIAL_QUERY="$QUERY" # Do show the initial query when it's not "^"
fi

# Some backwards compatibility stuff
if [[ $FZF_VER_PT1 == "0.2" && $FZF_VER_PT2 -lt 7 ]]; then
  if [[ $PREVIEW_COMMAND != "$FIND_WITHIN_FILES_PREVIEW_COMMAND" ]]; then
    PREVIEW_COMMAND='bat {1} --color=always --theme=Dracula  --highlight-line {2} --line-range {2}:'
  fi
  if [[ $PREVIEW_WINDOW != "$FIND_WITHIN_FILES_PREVIEW_WINDOW_CONFIG" ]]; then
    PREVIEW_WINDOW='right:50%'
  fi
fi

PREVIEW_STR=()
if [[ $PREVIEW_ENABLED -eq 1 ]]; then
  PREVIEW_STR=(--preview "$PREVIEW_COMMAND" --preview-window "$PREVIEW_WINDOW")
fi

RG_PREFIX_STR=$(array_join "${RG_PREFIX+"${RG_PREFIX[@]}"}")
RG_PREFIX_STR="${RG_PREFIX+"${RG_PREFIX[@]}"}"
FZF_CMD="${RG_PREFIX+"${RG_PREFIX[@]}"} $QUERY $(array_join "${PATHS[@]+"${PATHS[@]}"}")"

# echo $FZF_CMD
echo "$RG_PREFIX_STR"
# exit 1
# IFS sets the delimiter
# -r: raw
# -a: array
# Quick note on ${PREVIEW_STR[@]+"${PREVIEW_STR[@]}"}: Don't ask.
# https://stackoverflow.com/q/7577052/888916
IFS=: read -ra VAL < <(
  FZF_DEFAULT_COMMAND="$FZF_CMD" \
    fzf --ansi \
    --cycle \
    --bind "change:reload:sleep 0.1; $RG_PREFIX_STR {q} $(array_join "${PATHS[@]+"${PATHS[@]}"}") || true" \
    --delimiter : \
    --phony --query "$INITIAL_QUERY" \
    ${PREVIEW_STR[@]+"${PREVIEW_STR[@]}"}

)
# Output is filename, line number, character, contents
CANARY_FILE=/tmp/canary
if [[ ${#VAL[@]} -eq 0 ]]; then
  echo canceled
  exit 1
else
  FILENAME=${VAL[0]}:${VAL[1]}:${VAL[2]}
  if [[ -n $SINGLE_DIR_ROOT ]]; then
    CANARY_FILE="$SINGLE_DIR_ROOT/$FILENAME"
  else
    CANARY_FILE="$FILENAME"
  fi
fi

if [ -z ${TERM_PROGRAM+x} ]; then
  nvim "${VAL[0]}" "+normal  ${VAL[1]}G${VAL[2]}|"
else
  code -r --goto "$CANARY_FILE"
fi
